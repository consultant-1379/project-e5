package com.example.VulnerabilityChecker.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.*;
import static org.mockito.BDDMockito.given;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class VulnerabilityControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private VulnerabilityRepository vulnerabilityRepository;

    @Test
    public void testGetAllVulnerabilities() throws Exception {
        Vulnerability vulnerability = new Vulnerability(1, 1, "dependency1", "vuln1", "package1",
                "High", "1", "High", "1", "url1", "packageUrl1");
        List<Vulnerability> vulnerabilities = Collections.singletonList(vulnerability);

        given(vulnerabilityRepository.findAll()).willReturn(vulnerabilities);

        mockMvc.perform(get("/vulnerabilities"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1))
                .andExpect(jsonPath("$[0].dependency").value("dependency1"));
    }

    @Test
    public void testGetVulnerabilityById() throws Exception {
        Vulnerability vulnerability = new Vulnerability(1, 1, "dependency1", "vuln1", "package1",
                "High", "1", "High", "1", "url1", "packageUrl1");

        given(vulnerabilityRepository.findById(1)).willReturn(Optional.of(vulnerability));

        mockMvc.perform(get("/vulnerabilities/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.dependency").value("dependency1"));
    }

    @Test
    public void testGetVulnerabilitiesByDependency() throws Exception {
        Vulnerability vulnerability = new Vulnerability(1, 1, "dependency1", "vuln1", "package1",
                "High", "1", "High", "1", "url1", "packageUrl1");
        List<Vulnerability> vulnerabilities = Collections.singletonList(vulnerability);

        given(vulnerabilityRepository.findByDependency("dependency1")).willReturn(vulnerabilities);

        mockMvc.perform(get("/vulnerabilities/dependency/dependency1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].dependency").value("dependency1"));
    }

    @Test
    public void testGetVulnerabilitiesByPackage() throws Exception {
        Vulnerability vulnerability = new Vulnerability(1, 1, "dependency1", "vuln1", "package1",
                "High", "1", "High", "1", "url1", "packageUrl1");
        List<Vulnerability> vulnerabilities = Collections.singletonList(vulnerability);

        given(vulnerabilityRepository.findByPackage("package1")).willReturn(vulnerabilities);

        mockMvc.perform(get("/vulnerabilities/package/package1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].packageName").value("package1"));
    }

    @Test
    public void testDeleteVulnerabilityById() throws Exception {
        given(vulnerabilityRepository.existsById(1)).willReturn(true);

        mockMvc.perform(delete("/vulnerabilities/1"))
                .andExpect(status().isOk());

        // Verify deleteById is called
        verify(vulnerabilityRepository).deleteById(1);
    }

    @Test
    public void testDeleteAllVulnerabilities() throws Exception {
        mockMvc.perform(delete("/vulnerabilities"))
                .andExpect(status().isOk());

        // Verify deleteAll is called
        verify(vulnerabilityRepository).deleteAll();
    }

    @Test
    public void testInsertVulnerability() throws Exception {
        Vulnerability vulnerability = new Vulnerability(1, 1, "dependency1", "vuln1", "package1",
                "High", "1", "High", "1", "url1", "packageUrl1");

        given(vulnerabilityRepository.save(any(Vulnerability.class))).willReturn(vulnerability);

        mockMvc.perform(post("/vulnerabilities")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{  \"reportId\": 1,\n" +
                                "        \"dependency\": \"dependency1\",\n" +
                                "        \"vulnerabilityId\": \"vuln1\",\n" +
                                "        \"packageName\": \"package1\",\n" +
                                "        \"highestSeverity\": \"High\",\n" +
                                "        \"cveCount\": \"1\",\n" +
                                "        \"confidence\": \"High\",\n" +
                                "        \"evidenceCount\": \"1\",\n" +
                                "        \"vulnerabilityUrl\": \"url1\",\n" +
                                "        \"packageUrl\": \"packageUrl1\"}"))
                .andExpect(status().isCreated())
                .andExpect(header().string("Location", "http://localhost/vulnerabilities/1"));
    }
}
