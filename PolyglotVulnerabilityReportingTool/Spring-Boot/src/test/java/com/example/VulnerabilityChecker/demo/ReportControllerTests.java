package com.example.VulnerabilityChecker.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class ReportControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ReportRepository reportRepository;

    @Test
    public void testGetAllReports() throws Exception {
        Report report = new Report(1, 1, "2023-08-11", "reportSchema", "engineVersion");
        List<Report> reports = Collections.singletonList(report);

        given(reportRepository.findAll()).willReturn(reports);

        mockMvc.perform(get("/reports"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1));
    }

    @Test
    public void testGetReportById() throws Exception {
        Report report = new Report(1, 1, "2023-08-11", "reportSchema", "engineVersion");

        given(reportRepository.findById(1)).willReturn(Optional.of(report));

        mockMvc.perform(get("/reports/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1));
    }

    @Test
    public void testGetReportsByDatetime() throws Exception {
        Report report = new Report(1, 1, "2023-08-11", "reportSchema", "engineVersion");
        List<Report> reports = Collections.singletonList(report);

        given(reportRepository.findByDateTime("2023-08-11")).willReturn(reports);

        mockMvc.perform(get("/reports/dateTime/2023-08-11"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].id").value(1));
    }

    @Test
    public void testDeleteReportById() throws Exception {
        given(reportRepository.existsById(1)).willReturn(true);

        mockMvc.perform(delete("/reports/1"))
                .andExpect(status().isOk());

        verify(reportRepository).deleteById(1);
    }

    @Test
    public void testDeleteAllReports() throws Exception {
        mockMvc.perform(delete("/reports"))
                .andExpect(status().isOk());

        verify(reportRepository).deleteAll();
    }

    @Test
    public void testInsertReport() throws Exception {
        Report report = new Report(1, 1, "2023-08-11", "reportSchema", "engineVersion");

        // Configure the mock to return the report object when save is called
        given(reportRepository.save(any(Report.class))).willReturn(report);

        mockMvc.perform(post("/reports")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"repositoryId\": 1,\n" +
                                "\"dateTime\": \"2023-08-11\",\n" +
                                "\"reportSchema\": \"reportSchema\",\n" +
                                "\"engineVersion\": \"engineVersion\"}"))
                .andExpect(status().isCreated())
                .andExpect(header().string("Location", "http://localhost/reports/1"));
    }
}
