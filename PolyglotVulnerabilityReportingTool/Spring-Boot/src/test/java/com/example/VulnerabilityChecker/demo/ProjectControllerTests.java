package com.example.VulnerabilityChecker.demo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.verify;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
public class ProjectControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProjectRepository projectRepository;

    @Test
    public void testGetAllProjects() throws Exception {
        Project project = new Project(1,"Project 1", "groupIdTest", "artifactIdTest");
        List<Project> projects = Collections.singletonList(project);

        given(projectRepository.findAll()).willReturn(projects);

        mockMvc.perform(get("/projects"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].projectName").value("Project 1"));
    }

    @Test
    public void testGetProjectById() throws Exception {
        Project project = new Project(2,"Project 2", "groupIdTest", "artifactIdTest");
        project.setId(1);

        given(projectRepository.findById(2)).willReturn(Optional.of(project));

        mockMvc.perform(get("/projects/2"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1))
                .andExpect(jsonPath("$.projectName").value("Project 2"));
    }

    @Test
    void testGetProjectByName() throws Exception {
        Project project = new Project(1,"Project 1", "groupIdTest", "artifactIdTest");

        given(projectRepository.findByProjectName("Project 1")).willReturn(Collections.singletonList(project));

        mockMvc.perform(get("/projects/projectName/Project 1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].projectName").value("Project 1"));
    }

    @Test
    public void testDeleteProjectById() throws Exception {
        given(projectRepository.existsById(1)).willReturn(true);

        mockMvc.perform(delete("/projects/1"))
                .andExpect(status().isOk());

        verify(projectRepository).deleteById(1);
    }

    @Test
    public void testDeleteAllProjects() throws Exception {
        mockMvc.perform(delete("/projects"))
                .andExpect(status().isOk());

        verify(projectRepository).deleteAll();
    }

    @Test
    public void testInsertProject() throws Exception {
        Project project = new Project(1, "Project 1", "groupIdTest", "artifactIdTest");

        // Configure the mock to return the project object when save is called
        given(projectRepository.save(any(Project.class))).willReturn(project);

        mockMvc.perform(post("/projects")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{  \"projectName\": \"BabyENM\",\n" +
                                "        \"groupId\": \"com.goTeam\",\n" +
                                "        \"artifactId\": \"BabyENM\"}"))
                .andExpect(status().isCreated())
                .andExpect(header().string("Location", "http://localhost/projects/1"));
    }
}
