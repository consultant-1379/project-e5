package com.example.VulnerabilityChecker.demo;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.util.List;
import java.util.Optional;
import java.net.URI;

@RestController
@CrossOrigin(origins = "*")
public class VulnerabilityController {

    private final VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    public VulnerabilityController(VulnerabilityRepository vulnerabilityRepository){
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    @GetMapping(value = "/vulnerabilities", produces = "application/json")
    public @ResponseBody ResponseEntity<Iterable<Vulnerability>> getAllVulnerabilities(){
        Iterable<Vulnerability> result = vulnerabilityRepository.findAll();
        return ResponseEntity.ok().body(result);
    }

    @GetMapping(value = "/vulnerabilities/{id}", produces = "application/json")
    public @ResponseBody ResponseEntity<Vulnerability> getVulnerabilityById(@PathVariable Integer id){
        Optional<Vulnerability> optionalVulnerability = vulnerabilityRepository.findById(id);
        return optionalVulnerability.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }

    @GetMapping(value = "/vulnerabilities/dependency/{dependency}", produces = "application/json")
    public @ResponseBody ResponseEntity<List<Vulnerability>> getVulnerabilitiesByDependency(@PathVariable String dependency){
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findByDependency(dependency);
        if (vulnerabilities.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(vulnerabilities);
    }

    @GetMapping(value = "/vulnerabilities/package/{packageName}", produces = "application/json")
    public @ResponseBody ResponseEntity<List<Vulnerability>> getVulnerabilitiesByPackage(@PathVariable String packageName) {
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findByPackage(packageName);
        if (vulnerabilities.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(vulnerabilities);
    }

    @DeleteMapping(value = "/vulnerabilities/{id}", produces = "application/json")
    public @ResponseBody ResponseEntity<Void> deleteVulnerabilityById(@PathVariable Integer id){
        if (vulnerabilityRepository.existsById(id)){
            vulnerabilityRepository.deleteById(id);
            return ResponseEntity.ok().build();
        }else{
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping(value = "/vulnerabilities")
    public @ResponseBody ResponseEntity<Void> deleteAllVulnerabilities(){
        vulnerabilityRepository.deleteAll();
        return ResponseEntity.ok().build();
    }

    @PostMapping(value = "/vulnerabilities")
    public @ResponseBody ResponseEntity<Vulnerability> insertVulnerability(@RequestBody Vulnerability vulnerability){
        Vulnerability newVulnerability = vulnerabilityRepository.save(vulnerability);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(newVulnerability.getId()).toUri();
        return ResponseEntity.created(location).body(newVulnerability);
    }
}
