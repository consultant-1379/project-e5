package com.example.VulnerabilityChecker.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import java.util.List;
import java.util.Optional;
import java.net.URI;

@RestController
@CrossOrigin(origins = "*")
public class ReportController {

    private final ReportRepository reportRepository;

    @Autowired
    public ReportController(ReportRepository reportRepository){
        this.reportRepository = reportRepository;
    }

    @GetMapping(value = "/reports", produces = "application/json")
    public @ResponseBody ResponseEntity<Iterable<Report>> getAllReports(){
        Iterable<Report> result = reportRepository.findAll();
        return ResponseEntity.ok().body(result);
    }

    @GetMapping(value = "/reports/{id}", produces = "application/json")
    public @ResponseBody ResponseEntity<Report> getReportById(@PathVariable Integer id){
        Optional<Report> optionalReport = reportRepository.findById(id);
        return optionalReport.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }

    @GetMapping(value = "/reports/dateTime/{dateTime}", produces = "application/json")
    public @ResponseBody ResponseEntity<List<Report>> getReportsByDatetime(@PathVariable String dateTime){
        List<Report> reports = reportRepository.findByDateTime(dateTime);
        if (reports.isEmpty()){
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok().body(reports);
    }

    @DeleteMapping(value = "/reports/{id}", produces = "application/json")
    public @ResponseBody ResponseEntity<Void> deleteReportById(@PathVariable Integer id){
        if (reportRepository.existsById(id)){
            reportRepository.deleteById(id);
            return ResponseEntity.ok().build();
        }else{
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping(value = "/reports")
    public @ResponseBody ResponseEntity<Void> deleteAllReports(){
        reportRepository.deleteAll();
        return ResponseEntity.ok().build();
    }

    @PostMapping(value = "/reports")
    public @ResponseBody ResponseEntity<Report> insertReport(@RequestBody Report report){
        Report newReport = reportRepository.save(report);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(newReport.getId()).toUri();
        return ResponseEntity.created(location).body(newReport);
    }
}
