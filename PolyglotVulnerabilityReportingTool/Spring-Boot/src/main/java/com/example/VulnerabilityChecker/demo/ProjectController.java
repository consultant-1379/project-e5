package com.example.VulnerabilityChecker.demo;

import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.util.List;
import java.util.Optional;
import java.net.URI;

@RestController
@CrossOrigin(origins = "*")
public class ProjectController {

    private final ProjectRepository projectRepository;

    @Autowired
    public ProjectController(ProjectRepository projectRepository){
        this.projectRepository = projectRepository;
    }

    @GetMapping(value = "/projects", produces = "application/json")
    public @ResponseBody ResponseEntity<Iterable<Project>> getAllProjects(){
        Iterable<Project> result = projectRepository.findAll();
        return ResponseEntity.ok().body(result);
    }

    @GetMapping(value = "/projects/{id}", produces = "application/json")
    public @ResponseBody ResponseEntity<Project> getProjectById(@PathVariable Integer id){
        Optional<Project> optionalProject = projectRepository.findById(id);
        return optionalProject.map(ResponseEntity::ok).orElse(ResponseEntity.notFound().build());
    }

    @GetMapping(value = "/projects/projectName/{projectName}", produces = "application/json")
    public @ResponseBody ResponseEntity<List<Project>> getProjectByName(@PathVariable String projectName) {
        List<Project> newProject = projectRepository.findByProjectName(projectName);
        if (newProject== null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(newProject);
    }

    @DeleteMapping(value = "/projects/{id}", produces = "application/json")
    public @ResponseBody ResponseEntity<Void> deleteProjectById(@PathVariable Integer id){
        if (projectRepository.existsById(id)){
            projectRepository.deleteById(id);
            return ResponseEntity.ok().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping(value = "/projects")
    public @ResponseBody ResponseEntity<Void> deleteAllProjects(){
        projectRepository.deleteAll();
        return ResponseEntity.ok().build();
    }

    @PostMapping(value = "/projects")
    public @ResponseBody ResponseEntity<Project> insertProject(@RequestBody Project project){
        Project newProject = projectRepository.save(project);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(newProject.getId()).toUri();
        return ResponseEntity.created(location).body(newProject);
    }
}
