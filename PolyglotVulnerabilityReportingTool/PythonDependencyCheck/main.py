import subprocess
import xml.etree.ElementTree as ET
import os
import custom_json_parser
import sys


def add_plugin(xml_location):
    xml_path = f"{xml_location}\\pom.xml"
    ET.register_namespace("", 'http://maven.apache.org/POM/4.0.0')
    tree = ET.parse(xml_path)
    root = tree.getroot()

    # namespace = {'ns': 'http://maven.apache.org/POM/4.0.0'}

    new_plugin = ET.Element('plugin')
    group_id = ET.SubElement(new_plugin, 'groupId')
    group_id.text = 'org.owasp'
    artifact_id = ET.SubElement(new_plugin, 'artifactId')
    artifact_id.text = 'dependency-check-maven'
    version = ET.SubElement(new_plugin, 'version')
    version.text = '6.4.1'
    configuration = ET.SubElement(new_plugin, 'configuration')
    format_elem = ET.SubElement(configuration, 'format')
    format_elem.text = 'ALL'
    output_directory = ET.SubElement(configuration, 'outputDirectory')
    output_directory.text = '${project.basedir}/target/dependency-check-reports'
    executions = ET.SubElement(new_plugin, 'executions')
    execution = ET.SubElement(executions, 'execution')
    goals = ET.SubElement(execution, 'goals')
    goal_names = ['aggregate', 'check', 'purge', 'update-only']
    for goal_name in goal_names:
        goal = ET.SubElement(goals, 'goal')
        goal.text = goal_name

    build_section = root.find('.//{*}plugins')
    if build_section is not None:
        build_section.append(new_plugin)

    all_artifact_ids = root.findall('.//{*}artifactId')
    plugin_exists = any(artifact_id.text == 'dependency-check-maven' for artifact_id in all_artifact_ids)

    if not plugin_exists:
        build_section = root.find('.//{*}plugins')
        if build_section is not None:
            build_section.append(new_plugin)

    tree.write(xml_path, encoding='utf-8')


def run_dependency_check(project_name, repository_location):
    try:
        project_dir = f"{os.getcwd()}\\target"

        maven_command = f"cd {repository_location} && mvn org.owasp:dependency-check-maven:check"
        process = subprocess.Popen(maven_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        print(stderr)
        print(stdout)

        if process.returncode == 0:
            print("Dependency check completed successfully.")
            subprocess.run(
                f"robocopy {repository_location}\\target\\dependency-check-reports {project_dir}\\dependency-check-reports\\{project_name}",
                shell=True, check=True)

        else:
            print("Dependency check failed. Error output:")
            print(stderr.decode("utf-8"))

    except Exception as e:
        print("Error running dependency check:", e)


if __name__ == "__main__":

    if len(sys.argv) != 3:
        print("Not enough arguments. Please provide the name of the project and the link to it")
        sys.exit(1)
    else:
        project_name = sys.argv[1]
        repository_location = sys.argv[2]

        print(f"Project name: {project_name}")
        print(f"Project location: {repository_location}")

        add_plugin(repository_location)
        run_dependency_check(project_name, repository_location)
        print(f"{os.getcwd()}\\target\\dependency-check-reports\\{project_name}\\dependency-check-report.json")
        custom_json_parser.parse_json(f"{os.getcwd()}\\target\\dependency-check-reports\\{project_name}\\dependency-check-report.json")

    #project_name = "solution-aop"
    #repository_location = r"C:\Users\efeeeog\Downloads\spring-boot-dev\spring-boot-dev\solutions\solution-aop"
