# Python program to read
# json file

import json

import requests

VULNERABILITY_POST_URL = "http://localhost:8080/vulnerabilities"
REPORT_POST_URL = "http://localhost:8080/reports"
REPO_POST_URL = "http://localhost:8080/projects"

def parse_json(report_repo):
    # Opening JSON file
    vulnerabilityReport = open(report_repo)

    report = json.load(vulnerabilityReport)

    vulnerability_data_list = []

    # Repository table data
    projectName = report['projectInfo']['name']
    groupId = report['projectInfo']['groupID']
    artifactId = report['projectInfo']['artifactID']
    print("Repository table")
    print(f"Project name: {projectName}")
    print(f"groupId: {groupId}")
    print(f"artifactId: {artifactId}")
    print()

    repo_data = {
        "projectName": projectName,
        "groupId": groupId,
        "artifactId": artifactId
    }

    repoId = send_repo(repo_data)

    print("Report table")
    datetime = report['projectInfo']['reportDate']
    reportSchema = report['reportSchema']
    engineVersion = report['scanInfo']['engineVersion']
    print(f"repoId: {repoId}")
    print(f"datetime: {datetime}")
    print(f"reportSchema: {reportSchema}")
    print(f"engineVersion: {engineVersion}")
    print()

    report_data = {
        "repositoryId": repoId,
        "dateTime": datetime,
        "reportSchema": reportSchema,
        "engineVersion": engineVersion
    }

    reportId = send_report(report_data)

    count = 0
    severityLevels = {'NONE': 0, 'LOW': 1, 'MEDIUM': 2, 'HIGH': 3, 'CRITICAL': 4}

    print("Vulnerability table")
    for dependency in report['dependencies']:
        dependencyName = dependency['fileName']

        vulnerabilityId = ""
        confidence = ""
        vulnerabilityUrl = ""

        if 'vulnerabilityIds' in dependency:
            for vulnerability in dependency['vulnerabilityIds']:
                vulnerabilityId += vulnerability['id'] + "; "
                confidence = vulnerability['confidence']
                if 'url' in vulnerability:
                    vulnerabilityUrl += vulnerability['url'] + "; "

        packageUrl = ""
        package = ""
        if 'packages' in dependency:
            for pack in dependency['packages']:
                package += pack['id'] + "; "
                packageUrl += pack['url'] + "; "

        highestSeverity = 'NONE'
        cveCount = 0
        if 'vulnerabilities' in dependency:
            for vuln in dependency['vulnerabilities']:
                severity = vuln["severity"]
                if severityLevels.get(highestSeverity) < severityLevels.get(severity):
                    highestSeverity = severity
                cveCount += len(vuln['cwes'])

        evidenceCount = 0
        if 'vendorEvidence' in dependency['evidenceCollected']:
            evidenceCount += len(dependency['evidenceCollected']['vendorEvidence'])

        if 'productEvidence' in dependency['evidenceCollected']:
            evidenceCount += len(dependency['evidenceCollected']['productEvidence'])

        if 'versionEvidence' in dependency['evidenceCollected']:
            evidenceCount += len(dependency['evidenceCollected']['versionEvidence'])

        if vulnerabilityId and highestSeverity != "NONE":
            count += 1

            vulnerability_data = {
                "reportId": reportId,
                "dependency": dependencyName,
                "cveCount": cveCount,
                "evidenceCount": evidenceCount,
                "confidence": confidence,
                "highestSeverity": highestSeverity,
                "packageName": package,
                "vulnerabilityId": vulnerabilityId,
                "vulnerabilityUrl": vulnerabilityUrl,
                "packageUrl": packageUrl
            }

            vulnerability_data_list.append(vulnerability_data)

    print(f"Length: {count}")

    for vulnerability_data in vulnerability_data_list:
        for key, val in vulnerability_data.items():
            print(key, val)
        print()

    send_vulnerability(vulnerability_data_list)


def send_vulnerability(vulnerability_data_list):
    for vulnerability_data in vulnerability_data_list:
        try:
            response = requests.post(VULNERABILITY_POST_URL, json=vulnerability_data)
            response.raise_for_status()
            print("Vulnerability sent successfully.")
        except requests.exceptions.RequestException as e:
            print("Error sending vulnerability:", e)


def send_report(report_data):
    try:
        response = requests.post(REPORT_POST_URL, json=report_data)
        response.raise_for_status()
        print("Report sent successfully.\n")
        reportId = response.json().get("id")
        return reportId

    except requests.exceptions.RequestException as e:
        print("Error sending report:", e)
        return None


def send_repo(repo_data):
    try:
        response = requests.post(REPO_POST_URL, json=repo_data)
        response.raise_for_status()
        print("Repository sent successfully.\n")
        repoId = response.json().get("id")
        return repoId

    except requests.exceptions.RequestException as e:
        print("Error sending Repository:", e)
        return None


# if __name__ == "__main__":
#     parse_json('target/dependency-check-reports/dependency-check-report.json')






